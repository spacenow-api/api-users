AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: SANDPIT
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  SliceName:
    Type: String
    Default: MASTER
    Description: The name of the curent git brnach.
  ServiceName:
    Type: String
    Default: spacenow-front-service
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  LoadBalancerPort:
    Type: Number
    Default: 443
    Description: What port number the load balancer is binding to
  LoadBalancerPortHTTP:
    Type: Number
    Default: 80
    Description: What port number the load balancer is binding to
  ContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  HealthCheckPath:
    Type: String
    Default: /login
  Certificate:
    Type: String
    # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
    Default: 'arn:aws:acm:ap-southeast-2:159220020591:certificate/ec3b5931-c71d-4ddd-8157-d59964d168f2'
  # for autoscaling
  MinContainers:
    Type: Number
    Default: 1
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 10
  HostedZoneName:
    Type: String
    Default: ""
  Subdomain:
    Type: String
    Default: spacenow
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 50
  TaskDefinitionARN:
    Description: "Task definition for this service"
    Type: String
    Default: ""
  WebsiteURL:
    Description: "WEBSITE_URL"
    Type: String
    Default: ""
    NoEcho: true
  Sitename:
    Description: "SITENAME"
    Type: String
    Default: ""
    NoEcho: true
  AdminEmail:
    Description: "ADMIN_EMAIL"
    Type: String
    Default: ""
    NoEcho: true
  DbUser:
    Description: "DB_USER"
    Type: String
    Default: ""
    NoEcho: true
  DbPassword:
    Description: "DB_PASSWORD"
    Type: String
    Default: ""
    NoEcho: true
  DbEndpoint:
    Description: "DB_ENDPOINT"
    Type: String
    Default: ""
    NoEcho: true
  FixerApiAccessKey:
    Description: "FIXER_API_ACCESS_KEY"
    Type: String
    Default: ""
    NoEcho: true
  PaypalHost:
    Description: "PAYPAL_HOST"
    Type: String
    Default: ""
    NoEcho: true
  PaypalAppClientId:
    Description: "PAYPAL_APP_CLIENT_ID"
    Type: String
    Default: ""
    NoEcho: true
  PaypalAppSecret:
    Description: "PAYPAL_APP_SECRET"
    Type: String
    Default: ""
    NoEcho: true
  BraintreeMerchantId:
    Description: "BRAINTREE_MERCHANT_ID"
    Type: String
    Default: ""
    NoEcho: true
  BraintreePublicKey:
    Description: "BRAINTREE_PUBLIC_KEY"
    Type: String
    Default: ""
    NoEcho: true
  BraintreePrivateKey:
    Description: "BRAINTREE_PRIVATE_KEY"
    Type: String
    Default: ""
    NoEcho: true
  MailChimpApi:
    Description: "MAILCHIMP_API"
    Type: String
    Default: ""
    NoEcho: true
  MailChimpListId:
    Description: "MAILCHIMP_LIST_ID"
    Type: String
    Default: ""
    NoEcho: true
  MailChimpApiKey:
    Description: "MAILCHIMP_API_KEY"
    Type: String
    Default: ""
    NoEcho: true
  JwtSecret:
    Description: "JWT_SECRET"
    Type: String
    Default: ""
    NoEcho: true
  FacebookAppId:
    Description: "FACEBOOK_APP_ID"
    Type: String
    Default: ""
    NoEcho: true
  FacebookAppSecret:
    Description: "FACEBOOK_APP_SECRET"
    Type: String
    Default: ""
    NoEcho: true
  FacebookPixelCode:
    Description: "FACEBOOK_PIXEL_CODE"
    Type: String
    Default: ""
    NoEcho: true
  GoogleClientId:
    Description: "GOOGLE_CLIENT_ID"
    Type: String
    Default: ""
    NoEcho: true
  GoogleClientSecret:
    Description: "GOOGLE_CLIENT_SECRET"
    Type: String
    Default: ""
    NoEcho: true
  GoogleTrackingId:
    Description: "GOOGLE_TRACKING_ID"
    Type: String
    Default: ""
    NoEcho: true
  GoogleMapApi:
    Description: "GOOGLE_MAP_API"
    Type: String
    Default: ""
    NoEcho: true
  GoogleTagManager:
    Description: "GOOGLE_TAG_MANAGER"
    Type: String
    Default: ""
    NoEcho: true
  GoogleCaptcha:
    Description: "GOOGLE_CAPTCHA"
    Type: String
    Default: ""
    NoEcho: true
  StripeSecretKey:
    Description: "STRIPE_SECRET_KEY"
    Type: String
    Default: ""
    NoEcho: true
  SmtpHost:
    Description: "SMTP_HOST"
    Type: String
    Default: ""
    NoEcho: true
  SmtpSenderEmail:
    Description: "SMTP_SENDER_EMAIL"
    Type: String
    Default: ""
    NoEcho: true
  SmtpPort:
    Description: "SMTP_PORT"
    Type: String
    Default: ""
    NoEcho: true
  SmtpLoginEmail:
    Description: "SMTP_LOGIN_EMAIL"
    Type: String
    Default: ""
    NoEcho: true
  SmtpLoginPassword:
    Description: "SMTP_LOGIN_PASSWORD"
    Type: String
    Default: ""
    NoEcho: true
  SmtpFromName:
    Description: "SMTP_FROM_NAME"
    Type: String
    Default: ""
    NoEcho: true
  TwilioAccountSid:
    Description: "TWILIO_ACCOUNT_SID"
    Type: String
    Default: ""
    NoEcho: true
  TwilioAuthToken:
    Description: "TWILIO_AUTH_TOKEN"
    Type: String
    Default: ""
    NoEcho: true
  TwilioPhoneNumber:
    Description: "TWILIO_PHONE_NUMBER"
    Type: String
    Default: ""
    NoEcho: true
  S3Bucket:
    Description: "S3_BUCKET"
    Type: String
    Default: ""
    NoEcho: true
  Browser:
    Description: "BROWSER"
    Type: String
    Default: "false"
    NoEcho: true
  ApiBooking:
    Description: "API_BOOKING"
    Type: String
    Default: ""
    NoEcho: true
  ApiAvailabilities:
    Description: "API_AVAILABILITIES"
    Type: String
    Default: ""
    NoEcho: true
  ApiCampaings:
    Description: "API_CAMPAIGNS"
    Type: String
    Default: ""
    NoEcho: true
Conditions:
  isMaster: !Equals [ !Ref SliceName, master ]
  isFeature: !Not [Condition: isMaster]
  HasTaskDefinition: !Not [!Equals [ !Ref TaskDefinitionARN, ""]]


Resources:
  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AScalingRole, '-',!Ref SliceName]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
  # A role for the containers
  DefaultTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecRole , '-',!Ref SliceName]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        -
          PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:ListAllMyBuckets"
                  - "s3:ListBucket"
                Resource:
                  - "arn:aws:arn:aws:s3:::*"
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource:
                  - "arn:aws:s3:::*spacenow-images/*"


  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDef,'-' ,!Ref SliceName]]

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup, '-', !Ref SliceName]]
      VpcId:
        Fn::ImportValue:
            !Join ['-', [!Ref 'StackName', 'VPC-id']]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, LBSecurityGroup, '-', !Ref SliceName]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPortHTTP
          ToPort: !Ref LoadBalancerPortHTTP
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
            !Join ['-', [!Ref 'StackName', 'VPC-id']]

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 1024
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 2GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref DefaultTaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: WEBSITE_URL
              Value: !Ref WebsiteURL
            - Name: SITENAME
              Value: !Ref Sitename
            - Name: ADMIN_EMAIL
              Value: !Ref AdminEmail
            - Name: DATABASE_USERNAME
              Value: !Ref DbUser
            - Name: DATABASE_PASSWORD
              Value: !Ref DbPassword
            - Name: DATABASE_ENDPOINT
              Value: !Ref DbEndpoint
            - Name: FIXER_API_ACCESS_KEY
              Value: !Ref FixerApiAccessKey
            - Name: PAYPAL_HOST
              Value: !Ref PaypalHost
            - Name: PAYPAL_APP_CLIENT_ID
              Value: !Ref PaypalAppClientId
            - Name: PAYPAL_APP_SECRET
              Value: !Ref PaypalAppSecret
            - Name: BRAINTREE_MERCHANT_ID
              Value: !Ref BraintreeMerchantId
            - Name: BRAINTREE_PUBLIC_KEY
              Value: !Ref BraintreePublicKey
            - Name: BRAINTREE_PRIVATE_KEY
              Value: !Ref BraintreePrivateKey
            - Name: MAILCHIMP_API
              Value: !Ref MailChimpApi
            - Name: MAILCHIMP_LIST_ID
              Value: !Ref MailChimpListId
            - Name: MAILCHIMP_API_KEY
              Value: !Ref MailChimpApiKey
            - Name: JWT_SECRET
              Value: !Ref JwtSecret
            - Name: FACEBOOK_APP_ID
              Value: !Ref FacebookAppId
            - Name: FACEBOOK_APP_SECRET
              Value: !Ref FacebookAppSecret
            - Name: FACEBOOK_PIXEL_CODE
              Value: !Ref FacebookPixelCode
            - Name: GOOGLE_CLIENT_ID
              Value: !Ref GoogleClientId
            - Name: GOOGLE_CLIENT_SECRET
              Value: !Ref GoogleClientSecret
            - Name: GOOGLE_TRACKING_ID
              Value: !Ref GoogleTrackingId
            - Name: GOOGLE_MAP_API
              Value: !Ref GoogleMapApi
            - Name: GOOGLE_TAG_MANAGER
              Value: !Ref GoogleTagManager
            - Name: GOOGLE_CAPTCHA
              Value: !Ref GoogleCaptcha
            - Name: STRIPE_SECRET_KEY
              Value: !Ref StripeSecretKey
            - Name: SMTP_HOST
              Value: !Ref SmtpHost
            - Name: SMTP_SENDER_EMAIL
              Value: !Ref SmtpSenderEmail
            - Name: SMTP_PORT
              Value: !Ref SmtpPort
            - Name: SMTP_LOGIN_EMAIL
              Value: !Ref SmtpLoginEmail
            - Name: SMTP_LOGIN_PASSWORD
              Value: !Ref SmtpLoginPassword
            - Name: SMTP_FROM_NAME
              Value: !Ref SmtpFromName
            - Name: TWILIO_ACCOUNT_SID
              Value: !Ref TwilioAccountSid
            - Name: TWILIO_AUTH_TOKEN
              Value: !Ref TwilioAuthToken
            - Name: TWILIO_PHONE_NUMBER
              Value: !Ref TwilioPhoneNumber
            - Name: S3_BUCKET
              Value: !Ref S3Bucket
            - Name: API_BOOKING
              Value: !Ref ApiBooking
            - Name: API_AVAILABILITIES
              Value: !Ref ApiAvailabilities
            - Name: API_CAMPAIGNS
              Value: !Ref ApiCampaings
            - Name: BROWSER
              Value: !Ref Browser


          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTP
      - ListenerHTTPS
    Properties:
      ServiceName: !Join ['-', [!Ref 'StackName' , !Ref 'ServiceName' ,!Ref 'SliceName' ]]
      Cluster:
        Fn::ImportValue:
                !Join ['-', [!Ref 'StackName' , 'SPACENOW-ECSCLUSTER-Name']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue:
                !Join ['-', [!Ref 'StackName' , 'NETWORK-subnets-private-a-id']]
            - Fn::ImportValue:
                !Join ['-', [!Ref 'StackName' , 'NETWORK-subnets-private-b-id']]
            - Fn::ImportValue:
                !Join ['-', [!Ref 'StackName' , 'NETWORK-subnets-private-c-id']]
      TaskDefinition:  !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 10
      HealthyThresholdCount: 2
      Name: !Join ['', ['service-front-', !Ref SliceName]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId:
        Fn::ImportValue:
            !Join ['-', [!Ref 'StackName', 'VPC-id']]

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: !Ref LoadBalancerPort
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LoadBalancerPortHTTP
      Protocol: HTTP
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['', [!Ref ServiceName, LB, '-',!Ref SliceName]]
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue:
            !Join ['-', [!Ref 'StackName', 'NETWORK-subnets-publicdmz-a-id']]
        - Fn::ImportValue:
            !Join ['-', [!Ref 'StackName', 'NETWORK-subnets-publicdmz-b-id']]
        - Fn::ImportValue:
            !Join ['-', [!Ref 'StackName', 'NETWORK-subnets-publicdmz-c-id']]

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: isMaster
    Properties:
      HostedZoneName: !Join ['', [ !Ref HostedZoneName, .]]
      Name: !Join ['', [!Ref Subdomain, ., !Ref HostedZoneName, .]]
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
  DNSRecordFeature:
    Type: AWS::Route53::RecordSet
    Condition: isFeature
    Properties:
      HostedZoneName: !Join ['', [ !Ref HostedZoneName, .]]
      Name: !Join ['', [!Ref SliceName, -, !Ref Subdomain, ., !Ref HostedZoneName, .]]
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service/SPACENOW-CLUSTER , !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalPolicy, '-', !Ref SliceName]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref AutoScalingTargetValue
# Outputs:
#   Endpoint:
#     Description: Endpoint
#     Value: !Join ['', ['https://', !Ref DNSRecord]]
